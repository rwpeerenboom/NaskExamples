<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_generative_ai_validator">
    <sys_generative_ai_validator action="INSERT_OR_UPDATE">
        <active>true</active>
        <name>Put field descriptions in payload</name>
        <sys_class_name>sys_generative_ai_validator</sys_class_name>
        <sys_created_by>robert.peerenboom@snc</sys_created_by>
        <sys_created_on>2024-11-22 19:17:40</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e1dbda5947c2da501d7d4f5c416d439b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Put field descriptions in payload</sys_name>
        <sys_overrides/>
        <sys_package display_value="UXC Generative AI" source="sn_uxc_gen_ai">1923d9ddd1d22110f877c76675ff5b9d</sys_package>
        <sys_policy/>
        <sys_scope display_value="RobNaskSkill001">b227129d4782da501d7d4f5c416d43e1</sys_scope>
        <sys_update_name>sys_generative_ai_validator_e1dbda5947c2da501d7d4f5c416d439b</sys_update_name>
        <sys_updated_by>robert.peerenboom@snc</sys_updated_by>
        <sys_updated_on>2024-11-22 19:17:40</sys_updated_on>
        <validator_script><![CDATA[(function(payload) {
    if (payload?.metadata) {
        var metadata = payload.metadata;
        Object.keys(metadata).forEach(function(key) {
            if (key !== 'other_fields') {
                payload[key] = metadata[key] + payload[key];
            }
            if (key === 'other_fields') {
                Object.keys(metadata[key]).forEach(function(subKey) {
                    var desc = metadata[key][subKey];
                    payload[key][desc] = payload[key][subKey];
                    delete payload[key][subKey];
                });
            }
        });
        delete payload.metadata;
    }
    if (payload?.relatedlists_data) {
        var relatedlists = payload.relatedlists_data;
        var output = {};
        for (const list in relatedlists) {
            if (Array.isArray(relatedlists[list])) {
                const transformedValue = relatedlists[list]
                    .filter(item => typeof item === 'string')
                    .join('\n');
                output[list] = transformedValue;
            }
        }
        payload.relatedlists_data = output;
    }
    return payload;
})(payload);]]></validator_script>
    </sys_generative_ai_validator>
</record_update>
